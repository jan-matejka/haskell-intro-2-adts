<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <meta name="viewport" content="width=1024, user-scalable=no">

  <title>Haskell Intro</title>

  <!-- Required stylesheet -->
  <link rel="stylesheet" href="deck/core/deck.core.css">

  <!-- Extension CSS files go here. Remove or add as needed. -->
  <link rel="stylesheet" href="deck/extensions/goto/deck.goto.css">
  <link rel="stylesheet" href="deck/extensions/menu/deck.menu.css">
  <link rel="stylesheet" href="deck/extensions/navigation/deck.navigation.css">
  <link rel="stylesheet" href="deck/extensions/status/deck.status.css">
  <link rel="stylesheet" href="deck/extensions/hash/deck.hash.css">
  <link rel="stylesheet" href="deck/extensions/scale/deck.scale.css">

    <link href="./rainbow/themes/blackboard.css" rel="stylesheet" type="text/css" media="screen">
  <!-- Style theme. More available in /themes/style/ or create your own. -->
  <link rel="stylesheet" href="deck/themes/style/web-2.0.css">

  <!-- Transition theme. More available in /themes/transition/ or create your own. -->
  <link rel="stylesheet" href="deck/themes/transition/horizontal-slide.css">

  <link rel="stylesheet" type="text/css" href="./rainbow.linenumbers/theme.css" media="screen" />
  <!-- Required Modernizr file -->
  <script src="deck/modernizr.custom.js"></script>
</head>
<body class="deck-container">

<!-- Begin slides. Just make elements with a class of slide. -->

<section class="slide">
  <h2>Haskell</h2>

    <div>
        This is not a Monad tutorial.

        <br><br>
        <br><br>

        <a href="https://byorgey.wordpress.com/2009/01/12/abstraction-intuition-and-the-monad-tutorial-fallacy/">Monad tutorial fallacy</a><br>
        <a href="http://www.haskell.org/haskellwiki/Monad_tutorials_timeline">Monad tutorial timeline</a><br>
        <a href="http://blog.plover.com/prog/burritos.html">Monads are burritos</a><br>
    </div>
</section>

<!--
    <ul>
        <li>general purpose</li>
        <li>purely functional</li>
        <li>strong static typing</li>
        <li>lazy evaluated</li>
        <li>Garbage collected</li>
        <li>nothing mutable</li>
    </ul>
-->

<section class="slide">
    <h2>Getting started</h2>

    <pre><code data-language="shell">emerge ghc cabal-install</code></pre>

    <pre><code data-language="shell">zypper in ghc cabal-install</code></pre>
</section>

<section class="slide">
    <h2>Hello World</h2>

    <!-- this what a function definition looks like.
         main is a function.
         putStrLN is a function, "Hello World!" is putStrLn argument
     -->
    <pre><code data-language="haskell">{{ HelloWorldHs }}</code></pre>

    <pre><code>% runhaskell main.hs
Hello World!</code></pre>
</section>

<section class="slide">
    <h2>Haskell is purely functional</h2>
    <!--
        So it is oriented on functions a lot and we can do cool stuff
        with them.
     -->

<h3>Take list of strings, convert to ints and decrement</h3>
<pre><code data-language="haskell">{{ CompositionHs }}</code></pre>
<pre><code data-language="python">{{ CompositionPy }}</code></pre>
<pre><code data-language="python">{{ Composition0_1Py }}</code></pre>
<h3>Output</h3>
<pre><code data-language="haskell">{{ CompositionHsOut }}</code></pre>

</section>

<section class="slide">
    <h2>Haskell is purely functional</h2>

<h3>Application</h3>
<pre><code data-language="haskell">{{ CompositionHs }}</code></pre>
<pre><code data-language="haskell">{{ Composition2Hs }}</code></pre>

</section>

<section class="slide">
    <h2>Haskell is purely functional</h2>

<h3>Composition</h3>
<pre><code data-language="haskell">{{ Composition2Hs }}</code></pre>
<pre><code data-language="haskell">{{ Composition3Hs }}</code></pre>

<pre><code data-language="haskell">read          :: String -> Int
pred          :: Int    -> Int
(pred . read) :: String -> Int</code></pre>

</section>

<section class="slide">
    <h2>Haskell is purely functional</h2>

<h3>Partial Application</h3>

<pre><code data-language="haskell">{{ Composition3Hs }}</code></pre>
<pre><code data-language="haskell">{{ Composition4Hs }}</code></pre>

</section>

<section class="slide">
    <h2>Haskell is purely functional</h2>

    <!--
        Let's define more functions
     -->
<pre><code data-language="haskell">{{ WhatsYourNameExpandedHs }}</code></pre>
</section>

<section class="slide">
    <h2>Haskell is purely functional</h2>

    <!--
        But it sure does look imperative, doesn't it.

        Don't forget to explain the arrow: <-

            execute computation given by RHS and bind it's result into LHS
     -->
<pre><code data-language="haskell">{{ WhatsYourNameHs }}</code></pre>

<pre><code>% runhaskell main.hs
What's your name?
Bob
Hello Bob</code></pre>
</section>

<section class="slide">
    <h2>Haskell is purely functional</h2>

    <!--
        Let's define more functions
     -->
<pre><code data-language="haskell">{{ WhatsYourNameExpandedHs }}</code></pre>
</section>

<section class="slide">
    <h2>Haskell is purely functional</h2>

    <!--
        Do notation - syntactic sugar for bind

        It's functions all the way down.
     -->
<pre><code data-language="haskell">{{ WhatsYourNameBindHs }}</code></pre>

<pre><code data-language="haskell">(>>=) :: Monad m => m a -> (a -> m b) -> m b</code></pre>

    <p>
    A "complicated" way of saying

    <pre><code>LHS >>= RHS</code></pre>

    Execute LHS and pass it's result into RHS and execute it.
    </p>

</section>

<section class="slide">
    <h2>GHCi - getting type signatures</h2>

    <!--
        1. show ghci and explain type signatures.
        Omit the TypeClass Constraints, that may come later.

        2. explain pattern guards with mutliple definitions

        3. highlight consciseness of haskell signature compared to
           python
    -->

<pre><code>% ghci
Prelude> :t head</code></pre>
<pre><code data-language="haskell">head :: [a] -> a
head (x:_)              =  x
head []                 =  error "Empty list"</code></pre>
<pre><code data-language="python">def head(xs):
    """
    :type xs: [object]
    :returns: object
    """
    return xs[0]</code></pre>
</section>

<section class="slide">
    <h2>Hoogle</h2>

    <!--
        Say you need a function to split string into substrings by some
        delimiter, like a space. How do you search for?
    -->

    <p>How do you find a function by it's meaning?</p>

    <p><a href="http://www.haskell.org/hoogle/?hoogle=String+->+%5BString%5D">
        You hoogle it by Type Signature:: <code>String -> [String]</code>
    </a></p>

    <!-- first results: exatch match lines, words.
         then including IO monad and more generic ones like
            a ->  [a]
            or type aliased like [FilePath] -> FilePath
    -->
</section>

<section class="slide">
    <h2>Types - aliases</h2>
    <!--

        1. Prelude = stdlib

        2. explain import, hiding

        3. Easy type alias
           signature documents type
           no need for ":param p"
           also why haskell programmers often use one-char variables

        4, More hoogling! (Hoogle for the Type Alias)
    -->

<pre><code data-language="python">{{ TypeAliasPy }}</code></pre>
<pre><code>{{ TypeAliasPyOut }}</code></pre>
<pre><code data-language="haskell">{{ TypeAliasHs }}</code></pre>
<pre><code>{{ TypeAliasHsOut }}</code></pre>
</section>

<section class="slide">
    <h2>Imports</h2>
    <!--
        .. lazy eval
    -->

<pre><code data-language="haskell">{{ ImportsHs }}</code></pre>
<pre><code>{{ ImportsHsOut }}</code></pre>
</section>

<section class="slide">
    <h2>Imports</h2>
<h3>ImportsMain.py</h3>
<pre><code data-language="python">{{ ImportsPy }}</code></pre>
<h3>ImportsA.py</h3>
<pre><code data-language="python">{{ ImportsAPy }}</code></pre>
<h3>ImportsB.py</h3>
<pre><code data-language="python">{{ ImportsBPy }}</code></pre>
<h3>% python ImportsMain.py</h3>
<pre><code>{{ ImportsPyOut }}</code></pre>
</section>

<section class="slide">
    <h2>Imports</h2>
<pre><code data-language="haskell">{{ Imports2Hs }}</code></pre>
<pre><code>{{ Imports2HsOut }}</code></pre>
</section>

<section class="slide">
    <!-- other solutions: qualified, explicit list import -->
    <h2>Imports</h2>
<pre><code data-language="haskell">{{ Imports3Hs }}</code></pre>
<pre><code>{{ Imports3HsOut }}</code></pre>
</section>

<section class="slide">
    <h2>Types - Data</h2>
<pre><code data-language="haskell">{{ DataHs }}</code></pre>
<pre><code>{{ DataHsOut }}</code></pre>

<pre><code data-language="python">{{ DataPy }}</code></pre>
<pre><code>{{ DataPyOut }}</code></pre>
</section>

<section class="slide">
    <h2>Types - Polymorphism</h2>
<pre><code data-language="haskell">{{ Data2Hs }}</code></pre>
<pre><code>{{ Data2HsOut }}</code></pre>
</section>

<section class="slide">
    <h2>Types - Polymorphism</h2>
<pre><code data-language="haskell">{{ Data3Hs }}</code></pre>
<pre><code>{{ Data3HsOut }}</code></pre>
</section>

<section class="slide">
  <h2>Footnotes</h2>

  <ul>
    <li>Typeclassopedia
        <a href="http://www.haskell.org/haskellwiki/Typeclassopedia">
            http://www.haskell.org/haskellwiki/Typeclassopedia
        </a>
    </li>
  </ul>

  <ul class="TODO">
    <li>Slides hosted at <a href="http://yaccz.github.com/slides-haskell-intro/">yaccz.github.com/slides-haskell-intro/</a></li>
    <li><a href="https://twitter.com/yaccz">@yaccz</a></li>
  </ul>
</section>
<!-- End slides. -->


<!-- Begin extension snippets. Add or remove as needed. -->

<!-- deck.navigation snippet -->
<a href="#" class="deck-prev-link" title="Previous">&#8592;</a>
<a href="#" class="deck-next-link" title="Next">&#8594;</a>

<!-- deck.status snippet -->
<p class="deck-status">
  <span class="deck-status-current"></span>
  /
  <span class="deck-status-total"></span>
</p>

<!-- deck.goto snippet -->
<form action="." method="get" class="goto-form">
  <label for="goto-slide">Go to slide:</label>
  <input type="text" name="slidenum" id="goto-slide" list="goto-datalist">
  <datalist id="goto-datalist"></datalist>
  <input type="submit" value="Go">
</form>

<!-- deck.hash snippet -->
<a href="." title="Permalink to this slide" class="deck-permalink">#</a>

<!-- End extension snippets. -->


<!-- Required JS files. -->
<script src="deck/jquery-1.7.2.min.js"></script>
<script src="deck/core/deck.core.js"></script>

<!-- Extension JS files. Add or remove as needed. -->
<script src="deck/core/deck.core.js"></script>
<script src="deck/extensions/hash/deck.hash.js"></script>
<script src="deck/extensions/menu/deck.menu.js"></script>
<script src="deck/extensions/goto/deck.goto.js"></script>
<script src="deck/extensions/status/deck.status.js"></script>
<script src="deck/extensions/navigation/deck.navigation.js"></script>
<script src="deck/extensions/scale/deck.scale.js"></script>

<style type="text/css">
.slide pre {
background: #0B1022!important;
/* override the background given by `.deck-container .slide pre`
 * as that gets precedence before rainbows `pre`
 * and I don't know how to make this `just ignore the deck style
 * without patching or involving preprocessors like less
 */

font-size: 0.8em!important;
/* for reason unknown to me the text is weirdly huge, so make it a bit
 * smaller.
 */
}
</style>
<!-- Initialize the deck. You can put this in an external file if desired. -->
<script>
  $(function() {
    $.deck('.slide');

    // { mouse controll for the slides
    document.oncontextmenu = function() {return false;};
    $(document).mousedown(function(e){
      arg='next';
      if( e.button == 2 )
        arg='prev';
      $.deck(arg);
    });
    // }
  });
</script>

    <script src="./rainbow/js/rainbow.js"></script>
    <script src="./rainbow/js/language/haskell.js"></script>
    <script src="./rainbow/js/language/shell.js"></script>
    <script src="./rainbow/js/language/python.js"></script>
    <script src="./rainbow.linenumbers/rainbow.linenumbers.js"></script>
</body>
</html>
